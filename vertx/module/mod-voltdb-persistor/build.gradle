/* This file is part of VoltDB.
 * Copyright (C) 2008-2015 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

jar.enabled = false // we don't need this

// compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Werror"


repositories {
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

configurations {
  provided
}

dependencies {
  compile      "com.google.guava:guava:$guavaVersion"
  compile      files('/home/ssantoro/dev/voltdb/voltdb/voltdbclient-3.1.jar')

  provided     "org.vert-x:vertx-core:$vertxVersion"
  provided     "org.vert-x:vertx-platform:$vertxVersion"
  provided     "org.codehaus.groovy:groovy-all:$groovyVersion"
  provided     "org.vert-x:vertx-lang-groovy:$groovyLangModVersion@jar"

  testCompile "org.vert-x:vertx-core:$vertxVersion"
  testCompile "org.vert-x:vertx-platform:$vertxVersion"
  testCompile "org.vert-x:vertx-lang-java:$vertxVersion"
  testCompile "org.vert-x:vertx-lang-rhino:$vertxVersion"
  testCompile "org.mozilla:rhino:$rhinoVersion"

  testCompile( "org.vert-x:vertx-testframework:$vertxVersion" ) {
    transitive = false // don't need all of the other language deps
  }
  testCompile "junit:junit:$junitVersion"
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

project.ext {
    def slrp = new JsonSlurper()
    def conf = slrp.parseText(project.file('src/main/conf/mod.json').text)
    vmod = conf.main
}

task prepareVertxModule( type:Copy, dependsOn: 'classes' ) {
  into "build/mod/$modulename-v$version"
  from 'build/classes/main'
    include '**/*'
  from 'src/main/conf'
    include '**/*'
  from sourceSets.main.groovy
    include project.ext.vmod
  into( 'lib' ) {
    from configurations.compile
  }
}

// Package into build/libs/mod.zip
task distZip( type: Zip, dependsOn: 'prepareVertxModule' ) {
  group = 'vert.x'
  description = "Assembles a vert.x module in 'mod.zip' format"
  destinationDir = project.file('build/libs')
  archiveName = 'mod.zip'
  from( project.file( "build/mod/${modulename}-v${version}" ) ).into( "${modulename}-v${version}" )
}

// Check build/libs/mod.zip has a single root, and a mod.json entry
task dist( dependsOn: 'distZip' ) << {
  def entries = new java.util.zip.ZipFile( project.file( 'build/libs/mod.zip' ) ).entries().collect { it.name }
  def oneRoot = entries.every { it.startsWith "${modulename}-v${version}/" }
  def modjson = entries.find { it == "${modulename}-v${version}/mod.json" }
  if( !oneRoot ) {
    throw new GradleException( "Invalid mod.zip.  Multiple root folders located!" )
  }
  else if( !modjson ) {
    throw new GradleException( "Invalid mod.zip.  Cannot locate ${modulename}-v${version}/mod.json" )
  }
}

task prepareVertxTest(type: Sync, dependsOn: ['prepareVertxModule']) {
  from 'build/mod'
  into 'build/tmp/mod-test'
}

test {
  // Can't have the app on the vert.x classpath
  classpath = files( classpath.findAll {
    !( it.toString() ==~ /.+build\/(classes|resources)\/main$/ )
  } )

  // Some vert.x properties
  systemProperty 'vertx.test.timeout', 15
  systemProperty 'vertx.mods', "$projectDir/build/tmp/mod-test"
  systemProperty 'vertx.version', "$project.version"

  // Show output
  testLogging.showStandardStreams = true

  // No idea why we need to depend on testClasses...
  dependsOn << [ 'testClasses', 'prepareVertxTest' ]
}

task collectDeps(type: Copy) {
  group = 'vert.x'
  description = 'conveniently collect dependencies for other IDEs'
  destinationDir = file("build/deps")
  into("compile") {
    from configurations.compile
  }
  into("test") {
    from configurations.testCompile
  }
}

task debug << {
    ext {
        slrp = new JsonSlurper()
        vmod = slrp.parseText(project.file('src/main/conf/mod.json').text)
    }
    println vmod.main
    println project.ext.vmod

}

plugins.withType(IdeaPlugin) {
  idea {
    module {
      scopes.PROVIDED.plus += configurations.provided
      scopes.COMPILE.minus += configurations.provided
      scopes.TEST.minus += configurations.provided
      scopes.RUNTIME.minus += configurations.provided
    }
  }
}
